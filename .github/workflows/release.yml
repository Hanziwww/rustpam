name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Upload to Test PyPI instead of PyPI'
        required: false
        type: boolean
        default: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]  # macos-13=x86_64, macos-14=ARM64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Set up additional Python versions
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
            3.13

      - name: Build wheels
        run: |
          # Build for Python 3.10, 3.11, 3.12, 3.13
          maturin build --release --interpreter 3.10 3.11 3.12 3.13
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/*.whl
          retention-days: 30

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Build sdist
        run: maturin sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz
          retention-days: 30

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.test_pypi && 'testpypi' || 'pypi' }}
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -lh dist/

      - name: Publish to Test PyPI
        if: inputs.test_pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Publish to PyPI
        if: github.event_name == 'release' && !inputs.test_pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true

  verify-install:
    name: Verify installation from PyPI
    needs: publish
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for package to be available
        run: sleep 60
        shell: bash

      - name: Install from Test PyPI
        if: inputs.test_pypi
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ rustpam

      - name: Install from PyPI
        if: github.event_name == 'release' && !inputs.test_pypi
        run: pip install rustpam

      - name: Test import
        run: |
          python -c "import rustpam; from rustpam import OneBatchPAM; print(f'Successfully imported rustpam version: {rustpam.__version__}')"

      - name: Run basic test
        run: |
          python -c "
          import numpy as np
          from rustpam import OneBatchPAM
          X = np.random.randn(100, 5)
          model = OneBatchPAM(n_clusters=3, random_state=42)
          labels = model.fit_predict(X)
          print(f'Clustering completed. Labels shape: {labels.shape}')
          assert labels.shape == (100,), 'Labels shape mismatch'
          print('âœ“ Basic test passed')
          "
