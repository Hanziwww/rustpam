[build-system]
requires = ["maturin>=1.9,<2.0"]
build-backend = "maturin"

[project]
name = "rustpam"
version = "0.2.0"
description = "High-performance PAM (k-medoids) clustering implemented in Rust with Python bindings"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "RustPAM Contributors", email = "your.email@example.com" }
]
maintainers = [
    { name = "RustPAM Contributors", email = "your.email@example.com" }
]
keywords = ["clustering", "k-medoids", "PAM", "machine-learning", "rust", "parallel"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "numpy>=1.20",
    "scikit-learn>=1.0",
]

[project.urls]
Homepage = "https://github.com/Hanziwww/rustpam"
Documentation = "https://github.com/Hanziwww/rustpam#readme"
Repository = "https://github.com/Hanziwww/rustpam"
"Bug Tracker" = "https://github.com/Hanziwww/rustpam/issues"
Changelog = "https://github.com/Hanziwww/rustpam/releases"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "mypy>=1.0",
    "maturin>=1.9,<2.0",
]
[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "."
module-name = "rustpam._rustpam"

# Python code formatting with Black
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Default excludes
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | target
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", "venv", "build", "dist", "target"]

# Testing with pytest
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Type checking with mypy
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["numpy.*", "sklearn.*"]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["rustpam"]
omit = [
    "*/tests/*",
    "*/test/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
